$OAPI_contents = Get-Content "..\include\OrbiterAPI.h"

$headerContents = ""
$cpp = @"
#include "Hooks.h"
#include "detours.h"
#include <Windows.h>
"@
$installHooks = ""
$detachHooks = ""
$functionPointers = ""
$functions = ""

foreach($line in $OAPI_contents)
{
	#Make pointers adjacent to make stripping info out easier
	$line = $line -replace " \*", "* "
	$line = $line -replace " &", "& " 
	#Remove default params
	$line = $line -replace " = \S+",""
	if ($line -match "OAPIFUNC (?<returnType>.+) oapi(?<funcName>\w+) \((?<args>.+)\);")
	{
		#echo $matches[0]
		$returnType = $matches['returnType']
		$returnType = $returnType.trim()
		$funcName = $matches['funcName']
		$oapiFuncName = "oapi" + $funcName
		#generate new func name if we already have one
		#this is so we can handle overloaded functions
		if (select-string -SimpleMatch -pattern "OSDK_$funcName)" -InputObject $headerContents)
		{
			$index = 2
			while (select-string -SimpleMatch -pattern ("OSDK_"+ $funcName+ "_overload_" + $index + ")") -InputObject $headerContents)
			{
				$index += 1
			}
			$funcName = ($funcName+ "_overload_" + $index)
			echo $funcName
		}
		$args = $matches['args']
		$arg_array = $args.Split(',')
		$temp_arg_array = @()
		$argType_array = @()
		$argName_array = @()
		foreach($arg in $arg_array)
		{
			#remove any default parameters
			$arg = $arg -replace "=.*", ""
			#trim whitespace
			$arg = $arg.trim()
			$temp_arg_array += $arg
			$arg -match "\s*(?<argType>.*) (?<argName>\S*)\s*"
			$argType_array += ($matches['argType'])
			$argName_array += ($matches['argName'])
		}
		$arg_array = $temp_arg_array
		#now we have all the info we need
		#write the typedef and the function declaration
		$header_value = "typedef OAPIFUNC $returnType (*OSDK_$funcName)(" + ($argType_array -join ',') + ');' +
			"`r`n" + "$returnType  My$funcName(" + ($arg_array -join ',') + ");`r`n"
		$headerContents += $header_value
		$functionPointers += "OSDK_$funcName p$funcName = (OSDK_$funcName)$oapiFuncName;`r`n"
		$installHooks += "currentPointer = 	&(PVOID&)p$funcName;`r`n	Log::writeToLogDameon(`"Original $oapiFuncName :`",currentPointer,`"\r\n`");`r`n	DetourAttach(currentPointer, My$funcName);`r`n"
		$detachHooks += "	DetourDetach(&(PVOID&)p$funcName, My$funcName);`r`n"
		
		#generate logging string
		$loggingString = '"('
		$isFirst = 1
		foreach($nameArg in $argName_array)
		{
			if ($isFirst -ne 1)
			{
				$loggingString += " , "
			}
			$loggingString += ($nameArg + ':" , ' + $nameArg + ' , "')
			$isFirst = 0
		}
		$loggingString += ')"'
		if ($returnType -ne "void")
		{
		$functions += 
@"
$returnType  My$funcName($($arg_array -join ','))
	{
		Log::increaseIndent();
		Log::writeToLogDameon(IndentString(), "oapi$($funcName):",$($loggingString));
		$returnType returnValue = p$funcName($($argName_array -join ','));
		Log::writeToLogDameon("...\r\n");
		Log::decreaseIndent();
		return returnValue;
	}
	
"@
		}
		else
		{
				$functions += 
@"
$returnType  My$funcName($($arg_array -join ','))
	{
		Log::increaseIndent();
		Log::writeToLogDameon(IndentString(), "oapi$($funcName):",$($loggingString));
		p$funcName($($argName_array -join ','));
		Log::writeToLogDameon("...\r\n");
		Log::decreaseIndent();
	}
	
"@
		}
	}
}
$header = @"
//This file is autogenerated by writeHooks.ps1
//Do not edit or add to source control!
//Instead edit writeHooks and regenerate
#ifndef CATCH_CTD_HOOKS
#define CATCH_CTD_HOOKS
#include "Orbitersdk.h"

LONG AttachGlobalOAPIHooks(PVOID ** pFailedPointer);
LONG DetachGlobalOAPIHooks(PVOID ** pFailedPointer);

$headerContents

#endif
"@

$cpp = @"
//This file is autogenerated by writeHooks.ps1
//Do not edit or add to source control!
//Instead edit writeHooks and regenerate
#include "Hooks.h"
#include <Windows.h>
#include "detours.h"
#include "Log.h"

$functionPointers

LONG AttachGlobalOAPIHooks(PVOID ** pFailedPointer)
{
	DetourTransactionBegin();
	DetourSetIgnoreTooSmall(true);
    DetourUpdateThread(GetCurrentThread());
	PVOID* currentPointer = 0;
	$installHooks
	return DetourTransactionCommitEx(pFailedPointer);
}

LONG DetachGlobalOAPIHooks(PVOID ** pFailedPointer)
{
	DetourTransactionBegin();
	DetourSetIgnoreTooSmall(true);
    DetourUpdateThread(GetCurrentThread());
	$detachHooks
	return DetourTransactionCommitEx(pFailedPointer);
}

$functions

"@
$header | out-file Hooks.h -encoding ASCII
$cpp | out-file Hooks.cpp -encoding ASCII